{"version":3,"file":"static/js/432.ec6c2ce1.chunk.js","mappings":"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","sources":["components/shared-styles/redirect-block.styled.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RedirectWrapper = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { Ring } from '@uiball/loaders';\nimport { Container } from 'components/shared-styles/container';\nimport {\n  AddButton,\n  ErrorText,\n  FieldWrapper,\n  Label,\n  StyledField,\n  StyledForm,\n} from 'components/shared-styles/form.styled';\nimport { LinkButton } from 'components/shared-styles/link-button.styled';\nimport { RedirectWrapper } from 'components/shared-styles/redirect-block.styled';\nimport { useFormik } from 'formik';\nimport { registrationValidationSchema } from 'helpers/form-validation-schemas';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useRegisterUserMutation } from 'redux/authApi';\nimport { setToken } from 'redux/tokenSlice';\nimport uniqid from 'uniqid';\n\nconst RegisterPage = () => {\n  const formik = useFormik({\n    initialValues: { name: '', email: '', password: '' },\n    onSubmit: ({ name, email, password }) =>\n      handleSubmit(name, email, password),\n    validationSchema: registrationValidationSchema,\n  });\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [registerUser, { isLoading }] = useRegisterUserMutation();\n\n  const nameInputId = uniqid();\n  const emailInputId = uniqid();\n  const passwordInputId = uniqid();\n\n  const handleSubmit = async (name, email, password) => {\n    formik.resetForm();\n    console.log({ name, email, password });\n    try {\n      const data = await registerUser({ name, email, password }).unwrap();\n      dispatch(setToken(data.token));\n      setTimeout(() => {\n        navigate('/contacts');\n      }, 0);\n    } catch (error) {\n      console.log(error.error);\n    }\n  };\n\n  return (\n    <Container>\n      <h1>Register</h1>\n      <StyledForm onSubmit={formik.handleSubmit}>\n        <FieldWrapper>\n          <StyledField\n            className=\"styled-input\"\n            required\n            placeholder=\".\"\n            type=\"text\"\n            name=\"name\"\n            id={nameInputId}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.name}\n          />\n          <Label htmlFor={nameInputId}>Name</Label>\n          {formik.touched.name && formik.errors.name && (\n            <ErrorText>{formik.errors.name}</ErrorText>\n          )}\n        </FieldWrapper>\n        <FieldWrapper>\n          <StyledField\n            className=\"styled-input\"\n            required\n            placeholder=\".\"\n            type=\"email\"\n            name=\"email\"\n            id={emailInputId}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.email}\n          />\n          <Label htmlFor={emailInputId}>Email</Label>\n          {formik.touched.email && formik.errors.email && (\n            <ErrorText>{formik.errors.email}</ErrorText>\n          )}\n        </FieldWrapper>\n        <FieldWrapper>\n          <StyledField\n            className=\"styled-input\"\n            required\n            placeholder=\".\"\n            type=\"password\"\n            name=\"password\"\n            id={passwordInputId}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.password}\n          />\n          <Label htmlFor={passwordInputId}>Password</Label>\n          {formik.touched.password && formik.errors.password && (\n            <ErrorText>{formik.errors.password}</ErrorText>\n          )}\n        </FieldWrapper>\n        <AddButton type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            <Ring size={40} lineWeight={5} speed={2} color=\"white\" />\n          ) : (\n            'Register'\n          )}\n        </AddButton>\n      </StyledForm>\n      <RedirectWrapper>\n        <p>Already registered?</p>\n        <LinkButton type=\"button\" onClick={() => navigate('/login')}>\n          LogIn\n        </LinkButton>\n      </RedirectWrapper>\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["RedirectWrapper","styled","_templateObject","_taggedTemplateLiteral","formik","useFormik","initialValues","name","email","password","onSubmit","_ref","handleSubmit","validationSchema","registrationValidationSchema","dispatch","useDispatch","navigate","useNavigate","_useRegisterUserMutat","useRegisterUserMutation","_useRegisterUserMutat2","_slicedToArray","registerUser","isLoading","nameInputId","uniqid","emailInputId","passwordInputId","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","resetForm","console","log","unwrap","sent","setToken","token","setTimeout","t0","error","stop","_x","_x2","_x3","apply","arguments","_jsxs","Container","children","_jsx","StyledForm","FieldWrapper","StyledField","className","required","placeholder","type","id","onBlur","handleBlur","onChange","handleChange","value","values","Label","htmlFor","touched","errors","ErrorText","AddButton","disabled","Ring","size","lineWeight","speed","color","LinkButton","onClick"],"sourceRoot":""}